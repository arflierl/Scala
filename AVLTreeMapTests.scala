/**
 * cse250.pa4.AVLTreeMapTests.scala
 *
 * Copyright 2020 Andrew Hughes (ahughes6@buffalo.edu)
 *
 * This work is licensed under the Creative Commons
 * Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit
 * http://creativecommons.org/licenses/by-nc-sa/4.0/.
 */

package cse250.pa4

import org.scalatest.FlatSpec


class AVLTreeMapTests extends FlatSpec {
  val testSize = 10
  val inputKeys = Array.tabulate(testSize)(i => i + 1)
  val inputValues = Array.tabulate(testSize)(i => i.toString * i)
  behavior of "AVLTreeMap.insert"
  it should "add the (key,value) pairs" in {
    val treeMap = new AVLTreeMap[Int, String]
    val elements = inputKeys.zip(inputValues)
    for ((k, v) <- elements) {
      treeMap.addOne((k, v))
      assert(treeMap.contains(k))
    }
    val iterator = treeMap.iterator
    for (i <- elements.indices) {
      assert(iterator.hasNext)
      val elem = iterator.next
      assert(elem == elements(i))
    }
  }
  it should "add the (key,value) pairs for my first easy tree and rotate left" in {
    val tree = new AVLTreeMap[Int, String]
    tree.addOne(10, "10")
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left == null)
    assert(tree._storageTree._avlRoot._right == null)
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    tree.addOne((-40, "-40"))
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left == null)
    assert(tree._storageTree._avlRoot._left._right == null)
    assert(tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    tree.addOne((30, "30"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._right._right == null)
    assert(tree._storageTree._avlRoot._right._left == null)
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left == null)
    assert(tree._storageTree._avlRoot._left._right == null)
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    tree.addOne(12, "12")
    assert(tree._storageTree._avlRoot._right._left._parent._value == (30, "30"))
    assert(tree._storageTree._avlRoot._right._left._value == (12, "12"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._right._right == null)
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left == null)
    assert(tree._storageTree._avlRoot._left._right == null)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(tree._storageTree._avlRoot._right._right == null)
    assert(!tree._storageTree._avlRoot._leftH && tree._storageTree._avlRoot._rightH)
    tree.addOne(33, "33")
    assert(tree._storageTree._avlRoot._right._right._value == (33, "33"))
    assert(tree._storageTree._avlRoot._right._left._value == (12, "12"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left == null)
    assert(tree._storageTree._avlRoot._left._right == null)
    assert(!tree._storageTree._avlRoot._leftH && tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._right._left._leftH && !tree._storageTree._avlRoot._right._left._rightH)
    assert(!tree._storageTree._avlRoot._right._right._leftH && !tree._storageTree._avlRoot._right._right._rightH)
    tree.addOne(-20, "-20")
    assert(tree._storageTree._avlRoot._right._right._value == (33, "33"))
    assert(tree._storageTree._avlRoot._right._left._value == (12, "12"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left == null)
    assert(tree._storageTree._avlRoot._left._right._value == (-20, "-20"))
    assert(!tree._storageTree._avlRoot._left._leftH && tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._left._right._leftH && !tree._storageTree._avlRoot._left._right._rightH)
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._right._left._leftH && !tree._storageTree._avlRoot._right._left._rightH)
    assert(!tree._storageTree._avlRoot._right._right._leftH && !tree._storageTree._avlRoot._right._right._rightH)
    tree.addOne(-200, "-200")
    assert(tree._storageTree._avlRoot._right._right._value == (33, "33"))
    assert(tree._storageTree._avlRoot._right._left._value == (12, "12"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left._value == (-200, "-200"))
    assert(tree._storageTree._avlRoot._left._right._value == (-20, "-20"))
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._left._left._leftH && !tree._storageTree._avlRoot._left._left._rightH)
    assert(!tree._storageTree._avlRoot._left._right._leftH && !tree._storageTree._avlRoot._left._right._rightH)
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._right._left._leftH && !tree._storageTree._avlRoot._right._left._rightH)
    assert(!tree._storageTree._avlRoot._right._right._leftH && !tree._storageTree._avlRoot._right._right._rightH)
    tree.addOne(77, "77")
    assert(tree._storageTree._avlRoot._right._right._right._value == (77, "77"))
    assert(tree._storageTree._avlRoot._right._right._value == (33, "33"))
    assert(tree._storageTree._avlRoot._right._left._value == (12, "12"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left._value == (-200, "-200"))
    assert(tree._storageTree._avlRoot._left._right._value == (-20, "-20"))
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._left._left._leftH && !tree._storageTree._avlRoot._left._left._rightH)
    assert(!tree._storageTree._avlRoot._left._right._leftH && !tree._storageTree._avlRoot._left._right._rightH)
    assert(!tree._storageTree._avlRoot._leftH && tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._right._left._leftH && !tree._storageTree._avlRoot._right._left._rightH)
    assert(!tree._storageTree._avlRoot._right._right._leftH && tree._storageTree._avlRoot._right._right._rightH)
    tree.addOne(100, "100")
    assert(!tree._storageTree._avlRoot._leftH && tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && tree._storageTree._avlRoot._right._rightH)
    assert(tree._storageTree._avlRoot._right._left._value == (12, "12"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._right._right._value == (77, "77"))
    assert(tree._storageTree._avlRoot._right._right._left._value == (33, "33"))
    assert(tree._storageTree._avlRoot._right._right._right._value == (100, "100"))
    assert(!tree._storageTree._avlRoot._right._right._rightH && !tree._storageTree._avlRoot._right._right._leftH)
    assert(!tree._storageTree._avlRoot._right._right._right._rightH && !tree._storageTree._avlRoot._right._right._right._leftH)
    assert(!tree._storageTree._avlRoot._right._right._left._rightH && !tree._storageTree._avlRoot._right._right._left._leftH)
    for (i <- tree._storageTree.iterator) println(i)
    //copy this before inserting 77 and then do a right rotation and then the rotateleftright and rotaterightleft
  }

  it should "add the key-value pairs in my first easy tree and rotate right" in {
    val tree = new AVLTreeMap[Int, String]
    tree.addOne(10, "10")
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left == null)
    assert(tree._storageTree._avlRoot._right == null)
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    tree.addOne((-40, "-40"))
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left == null)
    assert(tree._storageTree._avlRoot._left._right == null)
    assert(tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    tree.addOne((30, "30"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._right._right == null)
    assert(tree._storageTree._avlRoot._right._left == null)
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left == null)
    assert(tree._storageTree._avlRoot._left._right == null)
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    tree.addOne(12, "12")
    assert(tree._storageTree._avlRoot._right._left._parent._value == (30, "30"))
    assert(tree._storageTree._avlRoot._right._left._value == (12, "12"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._right._right == null)
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left == null)
    assert(tree._storageTree._avlRoot._left._right == null)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(tree._storageTree._avlRoot._right._right == null)
    assert(!tree._storageTree._avlRoot._leftH && tree._storageTree._avlRoot._rightH)
    tree.addOne(33, "33")
    assert(tree._storageTree._avlRoot._right._right._value == (33, "33"))
    assert(tree._storageTree._avlRoot._right._left._value == (12, "12"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left == null)
    assert(tree._storageTree._avlRoot._left._right == null)
    assert(!tree._storageTree._avlRoot._leftH && tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._right._left._leftH && !tree._storageTree._avlRoot._right._left._rightH)
    assert(!tree._storageTree._avlRoot._right._right._leftH && !tree._storageTree._avlRoot._right._right._rightH)
    tree.addOne(-20, "-20")
    assert(tree._storageTree._avlRoot._right._right._value == (33, "33"))
    assert(tree._storageTree._avlRoot._right._left._value == (12, "12"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left == null)
    assert(tree._storageTree._avlRoot._left._right._value == (-20, "-20"))
    assert(!tree._storageTree._avlRoot._left._leftH && tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._left._right._leftH && !tree._storageTree._avlRoot._left._right._rightH)
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._right._left._leftH && !tree._storageTree._avlRoot._right._left._rightH)
    assert(!tree._storageTree._avlRoot._right._right._leftH && !tree._storageTree._avlRoot._right._right._rightH)
    tree.addOne(-200, "-200")
    assert(tree._storageTree._avlRoot._right._right._value == (33, "33"))
    assert(tree._storageTree._avlRoot._right._left._value == (12, "12"))
    assert(tree._storageTree._avlRoot._right._value == (30, "30"))
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-40, "-40"))
    assert(tree._storageTree._avlRoot._left._left._value == (-200, "-200"))
    assert(tree._storageTree._avlRoot._left._right._value == (-20, "-20"))
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._left._left._leftH && !tree._storageTree._avlRoot._left._left._rightH)
    assert(!tree._storageTree._avlRoot._left._right._leftH && !tree._storageTree._avlRoot._left._right._rightH)
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._right._left._leftH && !tree._storageTree._avlRoot._right._left._rightH)
    assert(!tree._storageTree._avlRoot._right._right._leftH && !tree._storageTree._avlRoot._right._right._rightH)
    tree.addOne(-204, "-204")
    tree.addOne(-420, "-420")
    assert(tree._storageTree._avlRoot._left._left._value == (-204, "-204"))
    assert(tree._storageTree._avlRoot._left._left._right._value == (-200, "-200"))
    assert(tree._storageTree._avlRoot._left._left._left._value == (-420, "-420"))
  }
  it should "do the right-left rotation" in {
    val tree = new AVLTreeMap[Int, String]
    tree.addOne(0, "0")
    tree.addOne(6, "6")
    tree.addOne(5, "5")
    assert(tree._storageTree._avlRoot._value == (5, "5"))
    assert(tree._storageTree._avlRoot._right._value == (6, "6"))
    assert(tree._storageTree._avlRoot._left._value == (0, "0"))
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
  }
  it should "do the left-right rotation" in {
    val tree = new AVLTreeMap[Int, String]
    tree.addOne(10, "10")
    tree.addOne(-5, "-5")
    tree.addOne(9, "9")
    assert(tree._storageTree._avlRoot._value == (9, "9"))
    assert(tree._storageTree._avlRoot._right._value == (10, "10"))
    assert(tree._storageTree._avlRoot._left._value == (-5, "-5"))
    assert(!tree._storageTree._avlRoot._rightH && !tree._storageTree._avlRoot._leftH)
    assert(!tree._storageTree._avlRoot._right._rightH && !tree._storageTree._avlRoot._right._leftH)
    assert(!tree._storageTree._avlRoot._left._rightH && !tree._storageTree._avlRoot._left._leftH)
  }
  it should "rotateLeft at the root" in {
    val tree = new AVLTreeMap[Int, String]
    tree.addOne(0, "0")
    tree.addOne(1, "1")
    tree.addOne(2, "2")
    assert(tree._storageTree._avlRoot._value == (1, "1"))
    assert(tree._storageTree._avlRoot._right._value == (2, "2"))
    assert(tree._storageTree._avlRoot._left._value == (0, "0"))
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
  }

  it should "rotateRight at the root" in {
    val tree = new AVLTreeMap[Int, String]
    tree.addOne(0, "0")
    tree.addOne(-1, "1")
    tree.addOne(-2, "2")
    assert(tree._storageTree._avlRoot._value == (-1, "1"))
    assert(tree._storageTree._avlRoot._left._value == (-2, "2"))
    assert(tree._storageTree._avlRoot._right._value == (0, "0"))
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
  }

  it should "show me what find returns on an empty tree" in {
    val tree = new AVLTreeMap[Int, String]
    val a = tree._storageTree.find(4)
    if (a == null) println("yes, find returns null if value is not stored")
  }
  it should "replace leaf value and then remove this leaf" in {
    val tree = new AVLTreeMap[Int, String]
    //val insert = Array(3,2,5,0,6,1,4)
    //for (i <- insert) tree.addOne(i, i.toString)
    tree.addOne(4, "4")
    tree.addOne(2, "2")
    tree.addOne(5, "5")
    assert(tree._storageTree._avlRoot._value == (4, "4"))
    assert(tree._storageTree._avlRoot._left._value == (2, "2"))
    assert(tree._storageTree._avlRoot._right._value == (5, "5"))
    assert(!tree._storageTree._avlRoot._rightH && !tree._storageTree._avlRoot._leftH)
    assert(!tree._storageTree._avlRoot._right._rightH && !tree._storageTree._avlRoot._right._leftH)
    assert(!tree._storageTree._avlRoot._left._rightH && !tree._storageTree._avlRoot._left._leftH)
    tree.addOne(0, "0")
    assert(!tree._storageTree._avlRoot._rightH && tree._storageTree._avlRoot._leftH)
    assert(!tree._storageTree._avlRoot._left._rightH && tree._storageTree._avlRoot._left._leftH)
    assert(tree._storageTree._avlRoot._left._left._value == (0, "0"))
    tree.addOne(6, "6")
    assert(!tree._storageTree._avlRoot._rightH && !tree._storageTree._avlRoot._leftH)
    assert(tree._storageTree._avlRoot._right._value == (5, "5"))
    assert(tree._storageTree._avlRoot._right._rightH)
    assert(tree._storageTree._avlRoot._right._right._value == (6, "6"))
    assert(!tree._storageTree._avlRoot._left._rightH && tree._storageTree._avlRoot._left._leftH)
    assert(tree._storageTree._avlRoot._right._rightH && !tree._storageTree._avlRoot._right._leftH)
    assert(tree._storageTree._avlRoot._value == (4, "4"))
    assert(tree._storageTree._avlRoot._left._value == (2, "2"))
    assert(tree._storageTree._avlRoot._left._left._value == (0, "0"))
    tree.addOne(3, "3")
    assert(!tree._storageTree._avlRoot._rightH && !tree._storageTree._avlRoot._leftH)
    assert(tree._storageTree._avlRoot._left._right._value == (3, "3"))
    assert(!tree._storageTree._avlRoot._left._rightH && !tree._storageTree._avlRoot._left._leftH)
    tree.addOne(3, "updated")
    assert(tree._storageTree._avlRoot._left._right._value == (3, "updated"))
    tree.removeOne(3)
    for (i <- tree._storageTree.iterator) println(i)
    assert(!tree._storageTree._avlRoot._left._rightH && tree._storageTree._avlRoot._left._leftH)
    assert(!tree._storageTree._avlRoot._rightH && !tree._storageTree._avlRoot._leftH)
    assert(!tree.removeOne(3234))
  }
  it should "lift its hands up and shout" in {
    val Billstree = new AVLTreeMap[Int, String]
    Billstree.addOne(17, "Josh Allen")
    Billstree.addOne(83, "Lee Evans")
    Billstree.addOne(13, "Cole Beasley")
    Billstree.addOne(12, "Jim Kelly")
    assert(Billstree._storageTree._avlRoot._left._left._value == (12, "Jim Kelly"))
    assert(!Billstree._storageTree._avlRoot._right._rightH && !Billstree._storageTree._avlRoot._right._leftH)
    assert(!Billstree._storageTree._avlRoot._rightH && Billstree._storageTree._avlRoot._leftH)
    assert(!Billstree._storageTree._avlRoot._left._rightH && Billstree._storageTree._avlRoot._left._leftH)
    Billstree.addOne(89, "Steve Tasker")
    assert(!Billstree._storageTree._avlRoot._rightH && !Billstree._storageTree._avlRoot._leftH)
    assert(Billstree._storageTree._avlRoot._right._rightH && !Billstree._storageTree._avlRoot._right._leftH)
    assert(!Billstree._storageTree._avlRoot._right._right._rightH && !Billstree._storageTree._avlRoot._right._right._leftH)
    assert(Billstree._storageTree._avlRoot._right._right._value == (89, "Steve Tasker"))
    Billstree.addOne(97, "Cornelius Bennett")
    assert(Billstree._storageTree._avlRoot._right._value == (89, "Steve Tasker"))
    assert(Billstree._storageTree._avlRoot._right._right._value == (97, "Cornelius Bennett"))
    assert(Billstree._storageTree._avlRoot._right._left._value == (83, "Lee Evans"))
    assert(!Billstree._storageTree._avlRoot._leftH && !Billstree._storageTree._avlRoot._rightH)
    assert(!Billstree._storageTree._avlRoot._right._leftH && !Billstree._storageTree._avlRoot._right._rightH)
    assert(!Billstree._storageTree._avlRoot._right._right._leftH && !Billstree._storageTree._avlRoot._right._right._rightH)
    assert(!Billstree._storageTree._avlRoot._right._left._leftH && !Billstree._storageTree._avlRoot._right._left._rightH)
    Billstree.addOne(78, "Bruce Smith")
    assert(Billstree._storageTree._avlRoot._rightH)
    assert(Billstree._storageTree._avlRoot._right._value == (89, "Steve Tasker"))
    assert(!Billstree._storageTree._avlRoot._right._rightH && Billstree._storageTree._avlRoot._right._leftH)
    assert(Billstree._storageTree._avlRoot._right._left._left._value == (78, "Bruce Smith"))
    assert(Billstree._storageTree._avlRoot._right._left._leftH)
    assert(Billstree.removeOne(83))
    assert(Billstree._storageTree._avlRoot._right._left._value == (78, "Bruce Smith"))
    assert(!Billstree._storageTree._avlRoot._right._left._leftH && !Billstree._storageTree._avlRoot._right._left._rightH)
    assert(Billstree._storageTree._avlRoot._right._value == (89, "Steve Tasker"))
    assert(!Billstree._storageTree._avlRoot._rightH && !Billstree._storageTree._avlRoot._leftH)
    assert(!Billstree._storageTree._avlRoot._right._leftH && !Billstree._storageTree._avlRoot._right._rightH)
    assert(Billstree._storageTree._avlRoot._left._leftH && !Billstree._storageTree._avlRoot._left._rightH)
    assert(Billstree.removeOne(13))
    assert(Billstree._storageTree._avlRoot._rightH)
    assert(!Billstree._storageTree._avlRoot._left._rightH && !Billstree._storageTree._avlRoot._left._leftH)
    assert(Billstree._storageTree._avlRoot._left._value == (12, "Jim Kelly"))
    assert(!Billstree._storageTree._avlRoot._right._rightH && !Billstree._storageTree._avlRoot._right._leftH)
    Billstree.addOne(15, "John Brown")
    assert(Billstree._storageTree._avlRoot._left._right._value == (15, "John Brown"))
    assert(Billstree._storageTree._avlRoot._left._left == null)
    assert(Billstree._storageTree._avlRoot._left._value == (12, "Jim Kelly"))
    assert(Billstree._storageTree._avlRoot._left._rightH && !Billstree._storageTree._avlRoot._left._leftH)
    assert(!Billstree._storageTree._avlRoot._rightH && !Billstree._storageTree._avlRoot._leftH)
    Billstree.addOne(5, "Tyrod Taylor")
    Billstree.addOne(83, "Andre Reed")
    assert(Billstree._storageTree._avlRoot._rightH && !Billstree._storageTree._avlRoot._leftH)
    assert(!Billstree._storageTree._avlRoot._right._rightH && Billstree._storageTree._avlRoot._right._leftH)
    assert(Billstree._storageTree._avlRoot._right._left._rightH && !Billstree._storageTree._avlRoot._right._left._leftH)
    Billstree.addOne(34, "Thurman Thomas")
    assert(!Billstree._storageTree._avlRoot._right._left._right._rightH && !Billstree._storageTree._avlRoot._right._left._right._leftH)
    assert(!Billstree._storageTree._avlRoot._right._left._left._rightH && !Billstree._storageTree._avlRoot._right._left._left._leftH)
    assert(Billstree._storageTree._avlRoot._rightH && !Billstree._storageTree._avlRoot._leftH)
    assert(!Billstree._storageTree._avlRoot._right._rightH && Billstree._storageTree._avlRoot._right._leftH)
    assert(!Billstree._storageTree._avlRoot._right._left._rightH && !Billstree._storageTree._avlRoot._right._left._leftH)
    Billstree.addOne(14, "Stefon Diggs")
    assert(!Billstree._storageTree._avlRoot._rightH && !Billstree._storageTree._avlRoot._leftH)
    assert(Billstree._storageTree._avlRoot._left._rightH && Billstree._storageTree._avlRoot._right._leftH)
    assert(Billstree._storageTree._avlRoot._left._right._leftH && !Billstree._storageTree._avlRoot._left._right._rightH)
    assert(!Billstree._storageTree._avlRoot._left._left._leftH && !Billstree._storageTree._avlRoot._left._left._rightH)
    assert(!Billstree._storageTree._avlRoot._left._right._left._leftH && !Billstree._storageTree._avlRoot._left._right._left._rightH)
    assert(Billstree._storageTree._avlRoot._left._right._left._value == (14, "Stefon Diggs"))
    Billstree.addOne(16, "Joe Montana")
    assert(!Billstree._storageTree._avlRoot._rightH && !Billstree._storageTree._avlRoot._leftH)
    assert(Billstree._storageTree._avlRoot._left._rightH && Billstree._storageTree._avlRoot._right._leftH)
    assert(!Billstree._storageTree._avlRoot._left._right._leftH && !Billstree._storageTree._avlRoot._left._right._rightH)
    assert(Billstree._storageTree._avlRoot._left._right._value == (15, "John Brown"))
    assert(!Billstree._storageTree._avlRoot._left._left._leftH && !Billstree._storageTree._avlRoot._left._left._rightH)
    assert(!Billstree._storageTree._avlRoot._left._right._left._leftH && !Billstree._storageTree._avlRoot._left._right._left._rightH)
    Billstree.addOne(13, "Dan Marino")
    assert(Billstree._storageTree._avlRoot._left._value == (14, "Stefon Diggs"))
    assert(!Billstree._storageTree._avlRoot._left._leftH && !Billstree._storageTree._avlRoot._left._rightH)
    assert(Billstree._storageTree._avlRoot._left._left._value == (12, "Jim Kelly"))
    assert(!Billstree._storageTree._avlRoot._left._left._leftH && !Billstree._storageTree._avlRoot._left._left._rightH)
    assert(Billstree._storageTree._avlRoot._left._right._value == (15, "John Brown"))
    assert(!Billstree._storageTree._avlRoot._left._right._leftH && Billstree._storageTree._avlRoot._left._right._rightH)
    assert(Billstree._storageTree._avlRoot._left._right._right._value == (16, "Joe Montana"))
    assert(!Billstree._storageTree._avlRoot._left._right._right._leftH && !Billstree._storageTree._avlRoot._left._right._right._rightH)
    assert(Billstree._storageTree._avlRoot._left._left._right._value == (13, "Dan Marino"))
    assert(!Billstree._storageTree._avlRoot._left._left._right._rightH && !Billstree._storageTree._avlRoot._left._left._right._leftH)
    assert(Billstree._storageTree._avlRoot._value == (17, "Josh Allen"))
    assert(Billstree._storageTree._avlRoot._left._right._left == null)
    Billstree.addOne(88, "Dawson 'Rambo' Knox")
    assert(Billstree._storageTree._avlRoot._value == (17, "Josh Allen"))
    assert(Billstree._storageTree._avlRoot._right._value == (83, "Andre Reed"))
    assert(Billstree._storageTree._avlRoot._right._left._value == (78, "Bruce Smith"))
    assert(Billstree._storageTree._avlRoot._right._right._value == (89, "Steve Tasker"))
    assert(Billstree._storageTree._avlRoot._right._right._left._value == (88, "Dawson 'Rambo' Knox"))
    assert(Billstree._storageTree._avlRoot._right._left._left._value == (34, "Thurman Thomas"))
    assert(Billstree._storageTree._avlRoot._right._right._right._value == (97, "Cornelius Bennett"))
    assert(!Billstree._storageTree._avlRoot._leftH && !Billstree._storageTree._avlRoot._rightH)
    assert(!Billstree._storageTree._avlRoot._right._leftH && !Billstree._storageTree._avlRoot._right._rightH)
    assert(Billstree._storageTree._avlRoot._right._left._leftH && !Billstree._storageTree._avlRoot._right._left._rightH)
    assert(!Billstree._storageTree._avlRoot._right._left._left._leftH && !Billstree._storageTree._avlRoot._right._left._left._rightH)
    assert(!Billstree._storageTree._avlRoot._right._right._leftH && !Billstree._storageTree._avlRoot._right._right._rightH)
    assert(!Billstree._storageTree._avlRoot._right._right._right._leftH && !Billstree._storageTree._avlRoot._right._right._right._rightH)
    assert(!Billstree._storageTree._avlRoot._right._right._left._leftH && !Billstree._storageTree._avlRoot._right._right._left._rightH)
    assert(!Billstree._storageTree._avlRoot._left._leftH && !Billstree._storageTree._avlRoot._left._rightH)
    /*Billstree.removeOne(5)
    assert(Billstree._storageTree._avlRoot._rightH)
    assert(Billstree._storageTree._avlRoot._left._value == (14, "Stefon Diggs"))
    assert(Billstree._storageTree._avlRoot._left._left._value == (12, "Jim Kelly"))
    assert(Billstree._storageTree._avlRoot._left._right._value == (15, "John Brown"))
    assert(Billstree._storageTree._avlRoot._value == (17, "Josh Allen"))
    assert(!Billstree._storageTree._avlRoot._left._right._leftH && !Billstree._storageTree._avlRoot._left._right._rightH)
    assert(!Billstree._storageTree._avlRoot._left._left._leftH && !Billstree._storageTree._avlRoot._left._left._rightH)
    assert(Billstree._storageTree._avlRoot._right._leftH && !Billstree._storageTree._avlRoot._right._rightH)
    assert(!Billstree._storageTree._avlRoot._right._right._leftH && !Billstree._storageTree._avlRoot._right._right._rightH)
    assert(!Billstree._storageTree._avlRoot._right._left._leftH && !Billstree._storageTree._avlRoot._right._left._rightH)
    assert(!Billstree._storageTree._avlRoot._right._left._left._leftH && !Billstree._storageTree._avlRoot._right._left._left._rightH)
    assert(!Billstree._storageTree._avlRoot._right._left._right._leftH && !Billstree._storageTree._avlRoot._right._left._right._rightH)
    assert(Billstree._storageTree._avlRoot._left._value == (14, "Stefon Diggs"))
    assert(!Billstree._storageTree._avlRoot._left._leftH && !Billstree._storageTree._avlRoot._left._rightH)
    for(i <- Billstree._storageTree.iterator) println(i)

     */
  }
  it should "remove the root" in {
    val tree = new AVLTreeMap[Int, String]
    tree.addOne(0, "0")
    tree.addOne(1, "1")
    tree.removeOne(0)
    assert(tree._storageTree._avlRoot._value == (1, "1"))
    assert(tree._storageTree._avlRoot._parent == null)
    tree.addOne(0, "0")
    assert(tree._storageTree._avlRoot._left._value == (0, "0"))
    assert(tree._storageTree._avlRoot._value == (1, "1"))
    tree.removeOne(1)
    for (i <- tree._storageTree.iterator) println(i)
    assert(tree._storageTree._avlRoot._value == (0, "0"))
    assert(tree._storageTree._avlRoot._parent == null)
  }
  it should "fix the issues for autograder" in {
    val tree = new AVLTreeMap[Int, String]
    val a = List(30, 40, 16, 50, 7, 18, 17, 19, 12, 3)
    for (i <- a) tree.addOne(i, i.toString)
    assert(tree._storageTree._avlRoot._left._right._value == (18, "18"))
    tree.addOne(0, "0")
    for (i <- tree._storageTree.iterator) println(i)
    assert(tree._storageTree._avlRoot._value == (16, "16"))
    assert(tree._storageTree._avlRoot._right._left._value == (18, "18"))
    assert(tree._storageTree._avlRoot._right._left._right._value == (19, "19"))
    assert(tree._storageTree._avlRoot._right._left._left._value == (17, "17"))
    assert(tree._storageTree._avlRoot._right._left._parent._value == (30, "30"))
    assert(tree._storageTree._avlRoot._left._left._left._value == (0, "0"))
    assert(tree._storageTree._avlRoot._left._left._leftH && !tree._storageTree._avlRoot._left._left._rightH)
    assert(tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._right._leftH && !tree._storageTree._avlRoot._right._rightH)
    assert(!tree._storageTree._avlRoot._right._left._leftH && !tree._storageTree._avlRoot._right._left._rightH)
    assert(!tree._storageTree._avlRoot._right._left._right._leftH && !tree._storageTree._avlRoot._right._left._right._rightH)
    assert(!tree._storageTree._avlRoot._right._left._left._leftH && !tree._storageTree._avlRoot._right._left._left._rightH)
    assert(!tree._storageTree._avlRoot._right._right._leftH && tree._storageTree._avlRoot._right._right._rightH)
  }
  it should "do the rightLeft rotation with c = -1" in {
    val tree = new AVLTreeMap[Int, String]
    val a = List(0,-20,20,40,15)
    for (i <- a) tree.addOne(i,i.toString)
    for (i <- tree._storageTree.iterator) println(i)
    tree.addOne(10,"10")
    assert(tree._storageTree._avlRoot._value == (15, "15"))
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(tree._storageTree._avlRoot._right._rightH && !tree._storageTree._avlRoot._right._leftH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(tree._storageTree._avlRoot._right._value == (20, "20"))
    assert(tree._storageTree._avlRoot._left._value == (0, "0"))
  }
  it should "do the rightLeft rotation with c = 1" in {
    val tree = new AVLTreeMap[Int, String]
    val a = List(0,-20,20,30,10)
    for (i <- a) tree.addOne(i,i.toString)
    tree.addOne(15,"15")
    for (i <- tree._storageTree.iterator) println(i)
    assert(tree._storageTree._avlRoot._value == (10, "10"))
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._right._rightH && !tree._storageTree._avlRoot._right._leftH)
    assert(tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
    assert(!tree._storageTree._avlRoot._right._left._rightH && !tree._storageTree._avlRoot._right._left._leftH)
    assert(tree._storageTree._avlRoot._right._left._value == (15, "15"))
  }
  it should "do the leftRight rotation with c = -1" in{
    val tree = new AVLTreeMap[Int, String]
    val a = List(0,20,-20,-40,-10)
    for (i <- a) tree.addOne(i,i.toString)
    tree.addOne(-15,"-15")
    for (i <- tree._storageTree.iterator) println(i)
    assert(tree._storageTree._avlRoot._value == (-10, "-10"))
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(tree._storageTree._avlRoot._right._rightH && !tree._storageTree._avlRoot._right._leftH)
    assert(!tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
  }
  it should "do the leftRight rotation with c = 1" in {
    val tree = new AVLTreeMap[Int, String]
    val a = List(0,20,-20,-40,-10)
    for (i <- a) tree.addOne(i,i.toString)
    for (i <- tree._storageTree.iterator) println(i)
    tree.addOne(-5,"-5")
    assert(tree._storageTree._avlRoot._value == (-10, "-10"))
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
    assert(!tree._storageTree._avlRoot._right._rightH && !tree._storageTree._avlRoot._right._leftH)
    assert(tree._storageTree._avlRoot._left._leftH && !tree._storageTree._avlRoot._left._rightH)
  }
  it should "insert the root, update it" in {
    val tree = new AVLTreeMap[Int, String]
    assert(tree._storageTree._avlRoot == null)
    tree.addOne(3, "3")
    assert(tree._storageTree._avlRoot._value == (3, "3"))
    assert(tree._storageTree._avlRoot._parent == null)
    tree.addOne(3, "updated")
    assert(tree._storageTree._avlRoot._value == (3, "updated"))
    assert(tree._storageTree._avlRoot._parent == null)
    assert(tree._storageTree._avlRoot._left == null && tree._storageTree._avlRoot._right == null)
    assert(!tree._storageTree._avlRoot._leftH && !tree._storageTree._avlRoot._rightH)
  }
}

